#include <GLES2/gl2.h>
#include <GLES2/gl2ext.h>
#include <android/log.h>
#include <jni.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

GLuint loadShader(GLenum shaderType, const char* pSource){
	GLuint shader = glCreateShader(shaderType);
	if(shader)
	{
		glShaderSource(shader, 1, &pSource, NULL);
		glCompileShader(shader);

		GLint compiled = 0;
		glGetShaderiv(shader, GL_COMPILE_STATUS, &compiled);

		if(!compiled){
			GLint infoLen = 0;
			glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &infoLen);

			char* buf = (char*)malloc(infoLen);
			if(buf){
				glGetShaderInfoLog(shader, infoLen, NULL, buf);
				free(buf);
			}
			glDeleteShader(shader);
			shader = 0;
		}
	}
	return shader;
}

GLuint createProgram(const char* mVertexSource, const char* mFragmentSource){
	GLuint vertexShader = loadShader(GL_VERTEX_SHADER, mVertexSource);
	if(!vertexShader){
		return 0;
	}

	GLuint fragmentShader = loadShader(GL_FRAGMENT_SHADER, mFragmentSource);
	if(!fragmentShader){
		return 0;
	}

	GLuint program = glCreateProgram();
	if(program){

		glAttachShader(program, vertexShader);
		glAttachShader(program, fragmentShader);

		glLinkProgram(program);
		GLint linkStatus = GL_FALSE;

		glGetProgramiv(program, GL_LINK_STATUS, &linkStatus);

		if(linkStatus != GL_TRUE){
			GLint bufLength = 0;
			glGetProgramiv(program, GL_INFO_LOG_LENGTH, &bufLength);

			if(bufLength){
				char* buf = (char*) malloc(bufLength);
				if(buf){
					glGetProgramInfoLog(program, bufLength, NULL, buf);
					free(buf);
				}
			}

			glDeleteProgram(program);
			program = 0;
		}
	}

	return program;
}

auto mVertexShader =
		"attribute vec4 vPosition;\n"
		"void main() {\n"
		"  gl_Position = vPosition;\n"
		"}\n";

auto mFragmentShader =
		"precision mediump float;\n"
		"void main() {\n"
		"  gl_FragColor = vec4(0.0, 0.0, 1.0, 1.0);\n"
		"}\n";

GLuint mProgram;
GLuint mvPositionHandle;

bool setUpGraphics(int w, int h){
	mProgram = createProgram(mVertexShader, mFragmentShader);

	if(!mProgram){
		return false;
	}
	mvPositionHandle = glGetAttribLocation(mProgram, "vPosition");

	glViewport(0, 0, w, h);

	return true;
}
const GLfloat mSquareVertices[] = {
		// Triangle one (top-left half of the square)
		-0.5f, 0.25f,   // Top-left corner
		-0.5f, -0.25f,  // Bottom-left corner
		0.5f, -0.25f,   // Bottom-right corner

		// Triangle two (bottom-right half of the square)
		0.5f, 0.25f,    // Top-right corner
		-0.5f, 0.25f,   // Top-left corner
		0.5f, -0.25f    // Bottom-right corner
};

void renderer(){
	glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
	glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);

	glUseProgram(mProgram);

	glVertexAttribPointer(mvPositionHandle, 2, GL_FLOAT, GL_FALSE, 0, mSquareVertices);

	glDrawArrays(GL_TRIANGLES, 0 ,3); //first Triangle
	glDrawArrays(GL_TRIANGLES, 3, 3); //second Triangle
}

extern "C"
JNIEXPORT void JNICALL
Java_com_example_squareshape_MainActivity_init(JNIEnv *env, jobject thiz, jint width, jint height)
{
	setUpGraphics(width, height);
}
extern "C"
JNIEXPORT void JNICALL
Java_com_example_squareshape_MainActivity_step(JNIEnv *env, jobject thiz)
{
	renderer();
}
