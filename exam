
// Created by bien.tang on 06/10/2024.
#include <stdio.h>
#include <stdint.h>
#include <tuple>
#include <chrono>
#include <unistd.h>
#include "pthread.h"
#include <android/native_window.h>
#include <EGL/egl.h>
#include "EGL/eglext.h"
#include "GLES3/gl3platform.h"
#include "GLES3/gl3.h"
#include "GLES3/gl3ext.h"
#include <android/log.h>
#include "Renderer.h"

#define APP_NAME "EngineRenderer"
#define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, APP_NAME, __VA_ARGS__))
#define LOGE(...) ((void)__android_log_print(ANDROID_LOG_ERROR, APP_NAME, __VA_ARGS__))

Renderer::Renderer(){
    mGlProgramId = -1;
    mVertexShader = -1;
    mFragmentShader = -1;
    mInputTextureId = -1;
    mWidth = -1;
    mHeight = -1;
    mEglDisplay = 0;
    mEglSurface = 0;
    mEglContext = 0;
    mMsg = MSG_NONE;
    LOGI("Renderer instance created");
    pthread_mutex_init(&mMutex, 0);
    return;
}

Renderer::~Renderer() {
    LOGI("Renderer instance destroyed");
    pthread_mutex_destroy(&mMutex);
    return;
}

void Renderer::setParams(int * input, int * inputFilter, int width, int height, const char* vertexShaderSource, const char* fragmentShaderSource){
    LOGI("Set Parameter");
    mARGBFrame = input;
    mFilter = inputFilter;
    mWidth = width;
    mHeight = height;
    mVertexShaderSource = vertexShaderSource;
    mFragmentShaderSource = fragmentShaderSource;
}

void Renderer::start() {
    LOGI("Creating renderer thread");
    pthread_create(&mThreadId, 0, threadStartCallback, this);
    return;
}

void Renderer::stop() {
    LOGI("Stopping renderer thread");

    //send message to render thread to stop rendering
    pthread_mutex_lock(&mMutex);
    mMsg = MSG_RENDER_LOOP_EXIT;
    pthread_mutex_unlock(&mMutex);

    pthread_join(mThreadId, 0);
    LOGI("Renderer thread stopped");
    return;
}

void Renderer::setWindow(ANativeWindow *window) {
    //notify render thread that window has change
    pthread_mutex_lock(&mMutex);
    mMsg = MSG_WINDOW_SET;
    mWindow = window;
    pthread_mutex_unlock(&mMutex);
    return;
}

void Renderer::renderLoop() {
    bool renderingEnable = true;
    LOGI("RenderLoop()");
    while(renderingEnable){
        pthread_mutex_lock(&mMutex);
        // process incomming messages
        switch (mMsg) {
            case MSG_WINDOW_SET:
                initialize();
                break;
            case MSG_RENDER_LOOP_EXIT:
                renderingEnable = false;
                destroy();
                break;
            default:
                break;
        }
        mMsg = MSG_NONE;

        if(mEglDisplay){
            drawFrame();
            if(!eglSwapBuffers(mEglDisplay, mEglSurface)){
                LOGE("eglSwapBuffer() returned error %d", eglGetError());
            }
        }

        pthread_mutex_unlock(&mMutex);
    }

    LOGI("Render loop exits");

    return;
}

GLuint Renderer::createShader(int aShaderType, const char *source){
    LOGI("createShader");
    GLuint shader = glCreateShader(aShaderType);
    if (shader != 0) {
        GLuint len = strlen(source);
        glShaderSource(shader, 1, &source, NULL);
        glCompileShader(shader);
        GLint compiled;
        glGetShaderiv(shader, GL_COMPILE_STATUS, &compiled);
        if (!compiled) {
            LOGE("compile shader failed...");
            GLint logSize;
            glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &logSize);
            char *logMsg = new char[logSize];
            glGetShaderInfoLog(shader, logSize, NULL, logMsg);
            LOGE( "failed %s", logMsg);
            glDeleteShader(shader);
            shader = 0;
        }
    }
    return shader;
}

GLuint VBO, VAO, EBO;
GLuint stickerVBO, stickerVAO, stickerEBO;

//float vertices[] = {
//        // first triangle
//        -0.5f, 0.5f, 0.0f,
//        -0.5f, -0.5f, 0.0f,
//        0.5f,  0.5f, 0.0f,
//        // second triangle
//        0.5f, 0.5f, 0.0f,  // left
//        -0.5f, -0.5f, 0.0f,  // right
//        0.5f, -0.5f, 0.0f   // top
//};

float vertices[] = {
        // position          // colors           // texture coords
        -1.0f, 1.0f, 0.0f,   1.0f, 0.0f, 0.0f,   0.0f, 0.0f,
        -1.0f, -1.0f, 0.0f,  0.0f, 1.0f, 0.0f,   0.0f, 1.0f,
        1.0f,  1.0f, 0.0f,   0.0f, 0.0f, 1.0f,   1.0f, 0.0f,
        1.0f, -1.0f, 0.0f,   1.0f, 1.0f, 0.0f,   1.0f, 1.0f
};

float stickerVertices[] = {
        // position          // colors           // texture coords
        -0.5f, 0.5f, 0.0f,   1.0f, 0.0f, 0.0f,   0.0f, 0.0f,    // top left
        -0.5f, -0.5f, 0.0f,  0.0f, 1.0f, 0.0f,   0.0f, 1.0f,    // bottom left
        0.5f,  0.5f, 0.0f,   0.0f, 0.0f, 1.0f,   1.0f, 0.0f,    // top right
        0.5f, -0.5f, 0.0f,   1.0f, 1.0f, 0.0f,   1.0f, 1.0f     // bottom right
};

unsigned int indices[] = {  // note that we start from 0!
        0, 1, 2,  // first Triangle
        2, 1, 3   // second Triangle
};

//todo: keep for check
void updateStickerVertices(float centerX, float centerY) {
    float halfSize = 0.25f; // Kích thước nửa của sticker
    GLfloat newStickerVertices[] = {
            centerX - halfSize, centerY + halfSize,  // Top-left
            centerX - halfSize, centerY - halfSize, // Bottom-left
            centerX + halfSize, centerY + halfSize, // Top-right
            centerX + halfSize, centerY - halfSize // Bottom-right
    };
}

bool Renderer::initialize() {
    mEglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);
    EGLint major_version[1];
    EGLint minor_version[1];
    eglInitialize(mEglDisplay, major_version, minor_version);

    const EGLint attribList[] = {
            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
            EGL_BLUE_SIZE, 8,
            EGL_GREEN_SIZE, 8,
            EGL_RED_SIZE, 8,
            EGL_NONE
    };

    EGLint numConfigs;
    EGLConfig config;
    eglChooseConfig(mEglDisplay, attribList, &config, 1, &numConfigs);

    EGLint format;
    eglGetConfigAttrib(mEglDisplay, config, EGL_NATIVE_VISUAL_ID, &format);

    ANativeWindow_setBuffersGeometry(mWindow, 0, 0, format);

    mEglSurface = eglCreateWindowSurface(mEglDisplay, config, mWindow, NULL);

    int attrib_list[] = {
            EGL_CONTEXT_CLIENT_VERSION, 2,
            EGL_NONE
    };

    mEglContext = eglCreateContext(mEglDisplay, config, EGL_NO_CONTEXT, attrib_list);

    if (mEglContext == EGL_NO_CONTEXT) {
        LOGE("eglCreateContext failed with error 0x%04x", eglGetError());
        return false;
    }

    if(eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface, mEglContext) == EGL_FALSE){
        LOGE("eglMakeCurrent failed with error 0x%04x", eglGetError());
        return false;
    }

    EGLint windowWidth;
    EGLint windowHeight;
    if (!eglQuerySurface(mEglDisplay, mEglSurface, EGL_WIDTH, &windowWidth) ||
        !eglQuerySurface(mEglDisplay, mEglSurface, EGL_HEIGHT, &windowHeight)) {
        LOGE("eglQuerySurface() returned error %d", eglGetError());
        destroy();
        return false;
    }
    LOGE("BienCheckLog print size window: %d - %d and size background: %d - %d", windowWidth, windowHeight, mWidth, mHeight);

    float windowAspect = (float) windowWidth/windowHeight;
    float imageAspect = (float) mWidth/mHeight;

    int viewportWidth, viewportHeight;

    if (imageAspect > windowAspect) {
        // Adjust width to fit surface view width and calculate height
        viewportWidth = windowWidth;
        viewportHeight = (int)(windowWidth / imageAspect);
    } else {
        // Adjust height to fit surface view height and calculate width
        viewportHeight = windowHeight;
        viewportWidth = (int)(windowHeight * imageAspect);
    }

    int viewportX = (windowWidth - viewportWidth) / 2;
    int viewportY = (windowHeight - viewportHeight) / 2;

    glViewport(viewportX, viewportY, viewportWidth, viewportHeight);

    // todo: keep for check - getPosition sticker
    // Xac dinh vi tri cham tren surface
    double xpos = 0;
    double ypos = 0;
    // Chuyen doi toa do surface sang toa do OpenGL
    float x = (2.0f * xpos) / windowWidth - 1.0f;
    float y = 1.0f - (2.0f * ypos) / windowHeight;
    // Update toa do sticker

    updateStickerVertices(x, y);

    glDisable(GL_DITHER);
    glHint(GL_PERSPECTIVE_CORRECTION_HINT, GL_FASTEST);
    glClearColor(0.0, 0.0, 0.0, 1.0);
    glEnable(GL_CULL_FACE);
    glShadeModel(GL_SMOOTH);
    glEnable(GL_DEPTH_TEST);

    GLfloat ratio = (GLfloat) viewportWidth / viewportHeight;
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glFrustumf(-ratio, ratio, -1, 1, 1, 10);

    LOGI("Init and Add source");
    GLuint vertexShader = createShader(GL_VERTEX_SHADER, mVertexShaderSource);
    GLuint fragmentShader = createShader(GL_FRAGMENT_SHADER, mFragmentShaderSource);
    // todo: create program and link program
    mGlProgramId = glCreateProgram();
    glAttachShader(mGlProgramId, vertexShader);
    glAttachShader(mGlProgramId, fragmentShader);
    glLinkProgram(mGlProgramId);
    GLint  isLinked;
    glGetProgramiv(mGlProgramId, GL_LINK_STATUS, &isLinked );

    if (!isLinked ) {
        LOGE("Program link failed..");
        GLint  logSize;
        glGetProgramiv(mGlProgramId, GL_INFO_LOG_LENGTH, &logSize);
        char* logMsg = new char[logSize];
        glGetProgramInfoLog(mGlProgramId, logSize, NULL, logMsg );
        LOGE("Program link failed Msg %s", logMsg);
    }
    LOGI("Link mGlProgramId Done");

    //create VAO, VBO
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    glGenBuffers(1, &EBO);
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // position attribute
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // color attribute
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*) (3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    // texture coord attribute
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*) (6 * sizeof(float)));
    glEnableVertexAttribArray(2);

    // todo: Sticker
    //create VAO, VBO
    glGenVertexArrays(1, &stickerVAO);
    glGenBuffers(1, &stickerVBO);
    glGenBuffers(1, &stickerEBO);
    glBindVertexArray(stickerVAO);

    glBindBuffer(GL_ARRAY_BUFFER, stickerVBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(stickerVertices), stickerVertices, GL_STATIC_DRAW);

    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, stickerEBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // position attribute
    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // color attribute
    glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*) (3 * sizeof(float)));
    glEnableVertexAttribArray(1);

    // texture coord attribute
    glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*) (6 * sizeof(float)));
    glEnableVertexAttribArray(2);

    int num_textures = 2;
    GLuint textures[num_textures];
    glGenTextures(num_textures, textures);
    mInputTextureId = textures[0];
    mFilterTextureId = textures[1];

    for (int i = 0; i < num_textures; i++) {
        glBindTexture(GL_TEXTURE_2D, textures[i]);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    }

    glBindBuffer(GL_ARRAY_BUFFER, 0);

    glBindVertexArray(0);

    return true;
}

void Renderer::destroy() {
    LOGI("Destroying context");

    eglMakeCurrent(mEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);
    eglDestroyContext(mEglDisplay, mEglContext);
    eglDestroySurface(mEglDisplay, mEglSurface);
    eglTerminate(mEglDisplay);

    mEglDisplay = EGL_NO_DISPLAY;
    mEglSurface = EGL_NO_SURFACE;
    mEglContext = EGL_NO_CONTEXT;

    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteBuffers(1, &EBO);

    glDeleteVertexArrays(1, &stickerVAO);
    glDeleteBuffers(1, &stickerVBO);
    glDeleteBuffers(1, &stickerEBO);
    return;
}

void Renderer::drawFrame() {
    // todo: draw
    glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT);
    // todo: render texture

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, mInputTextureId);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, mWidth, mHeight, 0, GL_RGBA, GL_UNSIGNED_BYTE, mARGBFrame);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glGenerateMipmap(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, 0);

    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, mFilterTextureId);

    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, 316, 315, 0, GL_RGBA, GL_UNSIGNED_BYTE, mFilter);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glGenerateMipmap(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, 1);

    glUseProgram(mGlProgramId);
    int timeLocation = glGetUniformLocation(mGlProgramId, "time");
    int samplerLocation = glGetUniformLocation(mGlProgramId, "ourTexture");
    int filterLocation = glGetUniformLocation(mGlProgramId, "outFilter");

    struct timespec res;
    clock_gettime(CLOCK_REALTIME, &res);
    float aColor = res.tv_nsec/1000000000.0f;
    glUniform1f(timeLocation,aColor);

    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, mInputTextureId);
    glUniform1i(samplerLocation, 0);

    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, mFilterTextureId);
    glUniform1i(filterLocation, 1);

    glBindVertexArray(VAO);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

    glBindVertexArray(stickerVAO);
    glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

    glBindVertexArray(0);
    eglSwapBuffers(mEglDisplay, mEglSurface);
}

void Renderer::setTextureInfo(int *frame, int width, int height) {
    mARGBFrame = frame;
    mWidth = width;
    mHeight = height;
}

void *Renderer::threadStartCallback(void *myself) {
    Renderer *renderer = (Renderer*) myself;

    renderer->renderLoop();
    pthread_exit(0);

    return 0;
}
